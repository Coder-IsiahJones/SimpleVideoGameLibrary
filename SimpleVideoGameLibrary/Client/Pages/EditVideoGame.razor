@page "/videogame";
@page "/videogame/{id:int}";
@inject HttpClient Http
@inject NavigationManager NavigationManager;

@if (Id is null)
{
    <PageTitle>Add a New Video Game</PageTitle>
    <h3>Add a New Video Game</h3>
}else
{
    <PageTitle>Edit @game.Title</PageTitle>
    <h3>Edit @game.Title</h3>
}

<EditForm Model="game" OnSubmit="HandleSubmit">
    <div>
        <label for="Title">Title</label>
        <InputText id="Title" @bind-Value="game.Title" class="form-control"/>
    </div>
    <div>
        <label for="Publisher">Publisher</label>
        <InputText id="Publisher" @bind-Value="game.Publisher" class="form-control"/>
    </div>
    <div>
        <label for="ReleaseYear">Release Year</label>
        <InputNumber id="ReleaseYear" @bind-Value="game.ReleaseYear" class="form-control"/>
    </div>
    <button type="submit" class="btn btn-primary mt-3">Save</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    VideoGame game = new VideoGame { Title = "New Game" };

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await Http.GetFromJsonAsync<VideoGame>($"api/videogame/{Id}");            if (result is not null)            {                game = result;            }        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await Http.PostAsJsonAsync("api/videogame", game);
            NavigationManager.NavigateTo("/videogames");
        }
        else
        {
            await Http.PutAsJsonAsync($"api/videogame/{Id}", game);
            NavigationManager.NavigateTo("/videogames");
        }
    }
}
