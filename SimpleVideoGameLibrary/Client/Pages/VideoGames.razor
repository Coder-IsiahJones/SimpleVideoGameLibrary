@page "/videogames"
@inject HttpClient Http;
@inject NavigationManager NavigationManager;

<h3>Video Games</h3>

@if (games.Count <= 0)
{
    <span>Loading Video Games...</span>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="AddVideoGame">Add Video Game</button>

    <QuickGrid Items="games.AsQueryable()">
        <PropertyColumn Title="Title" Property="game => game.Title" />
        <PropertyColumn Title="Publisher" Property="game => game.Publisher" />
        <PropertyColumn Title="ReleaseYear" Property="game => game.ReleaseYear" />
            <TemplateColumn>
                <button class="btn btn-primary mb-3" @onclick="() => EditVideoGame(context.Id)">Edit</button>
                <button class="btn btn-danger mb-3" @onclick="() => DeleteVideoGame(context.Id)">Delete</button>
            </TemplateColumn>
    </QuickGrid> 
}

@code {
    List<VideoGame> games = new List<VideoGame>();

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<List<VideoGame>>("api/videogame");

        if (result != null)
        {
            games = result;
        }
    }

    void AddVideoGame()
    {
        NavigationManager.NavigateTo("/videogame");
    }

    void EditVideoGame(int id)
    {
        NavigationManager.NavigateTo($"/videogame/{id}");
    }

    async Task DeleteVideoGame(int id)
    {
        var result = await Http.DeleteFromJsonAsync<VideoGame>($"api/videogame/{id}");

        if (result != null)
        {
            RemoveGameFromList(id);
        }
    }

    void RemoveGameFromList(int id)
    {
        var deletedGame = games.FirstOrDefault(game => game.Id == id);
        if (deletedGame != null)
        {
            games.Remove(deletedGame);
            StateHasChanged();
        }
    }
}
